package components

templ AdminSongCreatePage(props AdminSongCreateProps) {
	@Layout(PageMeta{
		Title:       "Create Song",
		Description: "Add a new song to the catalogue.",
		Path:        "/admin/song/create",
		MainClass:   "mx-auto flex w-full max-w-5xl flex-1 flex-col gap-10 px-6 py-10",
		ActiveNav:   "",
		NoIndex:     true,
	}) {
		<section class="space-y-8">
			<div class="flex flex-col justify-between gap-4 md:flex-row md:items-start">
				<div>
					<span class="badge badge-primary badge-outline mb-2">Admin</span>
					<h1 class="text-3xl font-semibold">New song</h1>
					<p class="text-base-content/70">Fill in the details below to publish a song to the catalogue.</p>
				</div>
				<div class="flex items-center gap-4">
					if props.CurrentUser != "" {
						<span class="text-sm text-base-content/70">Signed in as <span class="font-medium text-base-content">{ props.CurrentUser }</span></span>
					}
					<form method="post" action="/admin/logout">
						<button type="submit" class="btn btn-ghost btn-sm">Log out</button>
					</form>
				</div>
			</div>
			if props.Success {
				<div class="alert alert-success">
					<span>Song created successfully.</span>
				</div>
			}
			for _, errorMsg := range props.Errors {
				<div class="alert alert-error">
					<span>{ errorMsg }</span>
				</div>
			}
			<form method="post" action="/admin/song/create" class="space-y-6">
				<div class="grid gap-6 md:grid-cols-2">
					<div class="space-y-2">
						<label class="form-control w-full">
							<div class="label">
								<span class="label-text">Title</span>
							</div>
							<input
								type="text"
								name="title"
								class="input input-bordered w-full"
								value={ props.Values.Title }
								required
							/>
						</label>
						if message, ok := props.FieldErrors["title"]; ok {
							<p class="text-sm text-error">{ message }</p>
						}
					</div>
					<div class="space-y-2">
						<label class="form-control w-full">
							<div class="label">
								<span class="label-text">Key</span>
							</div>
							<input
								type="text"
								name="key"
								class="input input-bordered w-full"
								value={ props.Values.Key }
								placeholder="C, G, D..."
							/>
						</label>
					</div>
				</div>
				<div class="grid gap-6 md:grid-cols-2">
					<div class="space-y-2">
						<label class="form-control w-full">
							<div class="label">
								<span class="label-text">Level</span>
							</div>
							<select name="level" class="select select-bordered w-full">
								<option value="">Choose level</option>
								for _, option := range props.Levels {
									<option value={ option.Value } selected={ option.Selected }>{ option.Label }</option>
								}
							</select>
						</label>
						if message, ok := props.FieldErrors["level"]; ok {
							<p class="text-sm text-error">{ message }</p>
						}
					</div>
					<div class="space-y-2">
						<label class="form-control w-full">
							<div class="label">
								<span class="label-text">Language</span>
							</div>
							<select name="language" class="select select-bordered w-full">
								<option value="">Choose language</option>
								for _, option := range props.Languages {
									<option value={ option.Value } selected={ option.Selected }>{ option.Label }</option>
								}
							</select>
						</label>
						if message, ok := props.FieldErrors["language"]; ok {
							<p class="text-sm text-error">{ message }</p>
						}
					</div>
				</div>
				<div class="grid gap-6 md:grid-cols-2">
					<div class="space-y-2">
						<label class="form-control w-full">
							<div class="label">
								<span class="label-text">Release year</span>
							</div>
							<input
								type="number"
								name="release_year"
								class="input input-bordered w-full"
								value={ props.Values.ReleaseYear }
								min="0"
								placeholder="2024"
							/>
						</label>
						if message, ok := props.FieldErrors["release_year"]; ok {
							<p class="text-sm text-error">{ message }</p>
						}
					</div>
					<div class="space-y-2">
						<label class="form-control w-full">
							<div class="label">
								<span class="label-text">Album</span>
							</div>
							<select name="album_ids" multiple class="select select-bordered h-48 w-full">
								<option value="">No album</option>
								for _, option := range props.Albums {
									if option.Selected {
										<option value={ option.Value } selected>{ option.Label }</option>
									} else {
										<option value={ option.Value }>{ option.Label }</option>
									}
								}
							</select>
						</label>
						if message, ok := props.FieldErrors["album_ids"]; ok {
							<p class="text-sm text-error">{ message }</p>
						}
					</div>
				</div>
				<div class="grid gap-6 md:grid-cols-2">
					<div class="space-y-2">
						<label class="form-control w-full">
							<div class="label">
								<span class="label-text">Writers</span>
								<span class="label-text-alt">Hold Cmd/Ctrl to select multiple</span>
							</div>
							<select name="writer_ids" multiple class="select select-bordered h-48 w-full" size="6">
								<option value="">Unknwon writer</option>
								for _, option := range props.Writers {
									if option.Selected {
										<option value={ option.Value } selected>{ option.Label }</option>
									} else {
										<option value={ option.Value }>{ option.Label }</option>
									}
								}
							</select>
						</label>
						if message, ok := props.FieldErrors["writer_ids"]; ok {
							<p class="text-sm text-error">{ message }</p>
						}
					</div>
					<div class="space-y-2">
						<label class="form-control w-full">
							<div class="label">
								<span class="label-text">Artists</span>
								<span class="label-text-alt">Hold Cmd/Ctrl to select multiple</span>
							</div>
							<select name="artist_ids" multiple class="select select-bordered h-48 w-full" size="6">
								<option value="">Unknwon artist</option>
								for _, option := range props.Artists {
									if option.Selected {
										<option value={ option.Value } selected>{ option.Label }</option>
									} else {
										<option value={ option.Value }>{ option.Label }</option>
									}
								}
							</select>
						</label>
						if message, ok := props.FieldErrors["artist_ids"]; ok {
							<p class="text-sm text-error">{ message }</p>
						}
					</div>
				</div>
				<div class="space-y-2">
					<label class="form-control">
						<div class="label">
							<span class="label-text">Lyric &amp; chords</span>
							<span class="label-text-alt">Tab inserts a tab character</span>
						</div>
						<textarea
							id="lyric-editor"
							name="lyric"
							class="textarea textarea-bordered h-80 w-full font-mono"
							spellcheck="false"
						>{ props.Values.Lyric }</textarea>
					</label>
				</div>
				<div class="flex justify-end gap-4">
					<a href="/" class="btn btn-ghost">Cancel</a>
					<button type="submit" class="btn btn-primary">Save song</button>
				</div>
			</form>
		</section>
		<script>
      document.addEventListener('DOMContentLoaded', function () {
        const editor = document.getElementById('lyric-editor');
        if (!editor) {
          return;
        }
        editor.addEventListener('keydown', function (event) {
          if (event.key === 'Tab') {
            event.preventDefault();
            const start = editor.selectionStart;
            const end = editor.selectionEnd;
            const value = editor.value;
            editor.value = value.substring(0, start) + "\t" + value.substring(end);
            editor.selectionStart = editor.selectionEnd = start + 1;
          }
        });
      });
    </script>
	}
}
